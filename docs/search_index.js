var documenterSearchIndex = {"docs":
[{"location":"index.html#ModiaSim","page":"Home","title":"ModiaSim","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"ModiaSim consists of a set of Julia packages for modeling and simulation of multidomain engineering systems (electrical, 3D mechanical, fluid, etc.) described by differential equations, algebraic equations, and (space-discretized) partial differential equations. It shares many powerful features of the Modelica language, together with new features not available in Modelica. Simulation is performed with DifferentialEquations.jl, units are supported via Unitful.jl , uncertainty modeling is performed with Measurements.jl, Monte Carlo simulation is performed with MonteCarloMeasurements.jl. The following packages are currently available:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Package Description\nTinyModia.jl Component- and equation-based modeling of multidomain engineering systems\nModiaPlot.jl Convenient line plots of time series data identified by string keys (using GLMakie)\nModiaBase.jl Core algorithms for equation-based modeling","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"The following packages are outdated and should not be used (they are currently redesigned):","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Modia.jl, Modia3D.jl, ModiaMedia.jl, ModiaMath.jl","category":"page"},{"location":"index.html#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"The packages require Julia 1.5 or 1.6. They are registered and can be installed with:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"julia> ]add ModiaBase, ModiaPlot, TinyModia","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"It is recommended to also add the following packages, in order that all tests and examples can be executed in your standard environment:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"julia> ]add Unitful, DifferentialEquations, Measurements, MonteCarloMeasurements, Distributions","category":"page"},{"location":"index.html#Example","page":"Home","title":"Example","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"The following differential equations describes a damped pendulum:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"beginaligned\r\n fracdvarphidt = omega \r\n                   0 = m cdot L^2 cdot fracdomegadt + d cdot omega + m cdot g cdot L cdot sin(varphi) \r\n                   r = beginpmatrix\r\n                           L*cos(varphi) \r\n                          -L*sin(varphi)\r\n                        endpmatrix\r\nendaligned","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"where varphi is the rotation angle, omega the angular velocity, m the mass, L the rod length, d a damping constant, g the gravity constant and r the vector from the origin of the world system to the tip of the pendulum. These equations can be defined, simulated and plotted with:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"using TinyModia, Unitful, ModiaPlot\r\nusing DifferentialEquations\r\n\r\nPendulum = Model(\r\n   L = 0.8u\"m\",\r\n   m = 1.0u\"kg\",\r\n   d = 0.5u\"N*m*s/rad\",\r\n   g = 9.81u\"m/s^2\",\r\n   phi = Var(init = 1.57*u\"rad\"),\r\n   w   = Var(init = 0u\"rad/s\"),\r\n   r   = Var(start=zeros(2)u\"m\"),\r\n   equations = :[\r\n          w = der(phi)\r\n        0.0 = m*L^2*der(w) + d*w + m*g*L*sin(phi)\r\n          r = [L*cos(phi), -L*sin(phi)]\r\n   ]\r\n)\r\n\r\n\r\npendulum = @instantiateModel(Pendulum)\r\nsimulate!(pendulum, Tsit5(), stopTime = 10.0u\"s\")\r\nplot(pendulum, [(\"phi\", \"w\"); \"r\"])","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"The result is the following plot:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"(Image: Pendulum-Figure)","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Normally distributed uncertainty can be added, simulated and plotted in the following way:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"using Measurements\r\nPendulumWithUncertainties = Pendulum | Map(L = (0.8 ± 0.2)u\"m\",\r\n                                           m = (1.0 ± 0.2)u\"kg\",\r\n                                           d = (0.5 ± 0.2)u\"N*m*s/rad\")\r\npendulum2 =  @instantiateModel(PendulumWithUncertainties,\r\n                               FloatType = Measurement{Float64})\r\nsimulate!(pendulum2, Tsit5(), stopTime = 10.0u\"s\")\r\nplot(pendulum2, [(\"phi\", \"w\"); \"r\"], figure = 2)","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"resulting in the following plot:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"(Image: PendulumWithUncertainty)","category":"page"}]
}
